'''
Usage
------
To run a specific random seed
$ snakemake --config random_seed=101 all

Prerequisites
-------------
1) Need local install of anaconda
2) Need local install of Snakemake
See README.md for install instructions
'''
import glob
import os
import numpy as np

# REPO_ROOT_DIR = os.environ.get("REPO_ROOT_DIR", "/Users/giamm/covid-19-forecasting/myown/")
REPO_ROOT_DIR = ""
os.environ['REPO_ROOT_DIR'] = os.path.abspath(REPO_ROOT_DIR)

# Specified in configfile:
# --output_dir
# --min_random_seed 1001
# --max_random_seed 1100
# --random_seed 0
configfile: "config.json"

# Target rule to run multiple simulations saved to different CSV files
#
# Uses the 'template' defined below
rule all:
    input:
        [os.path.join(
                os.path.expandvars(config['output_dir']),          
                "results-random_seed={random_seed}.csv".format(random_seed=seed)
                )
            for seed in range(config['min_random_seed'], config['max_random_seed'])],
        [os.path.join(
                os.path.expandvars(config['output_dir']),          
                "summary-percentile={percentile:06.2f}.csv".format(percentile=float(perc))
                )
            for perc in config['comma_sep_percentiles'].split(',')]

# Target rule to run one specific simulation (with seed provided by manual command line input)
#
# Uses the 'template' defined below
rule run_example_simulation:
    input:
        #"results-random_seed={random_seed}.csv".format(random_seed=config['random_seed'])
        os.path.join(
            os.path.expandvars(config['output_dir']),
            "results-random_seed={random_seed}.csv".format(random_seed=config['random_seed']),
            )

rule template:
    input:
        config_json="params.json",
        forecast_script=glob.glob(os.path.join(REPO_ROOT_DIR, 'run_forecast.py')),
        source_files=glob.glob(os.path.join(REPO_ROOT_DIR, 'semimarkov_forecaster/*.py'))

    output:
        output_csv=os.path.join(
            os.path.expandvars("{output_dir}"),
            "results-random_seed={random_seed}.csv")

    conda:
        os.path.join(REPO_ROOT_DIR, "semimarkov_forecaster.yml")

    shell:
        """\
        dirname {output.output_csv} | xargs mkdir -p && \
        python {input.forecast_script} \
            --config_file "{input.config_json}" \
            --random_seed "{wildcards.random_seed}" \
            --output_file "{output.output_csv}" \
        """

# Target rule to run summary (relies on the individual simulations being done)
#

rule summarize:
    input:
        input_dir=os.path.expandvars("{output_dir}"),
        summarize_script=os.path.join(REPO_ROOT_DIR, 'summarize_forecasts.py'),
        source_files=glob.glob(os.path.join(REPO_ROOT_DIR, 'semimarkov_forecaster/*.py'))

    output:
        [os.path.join(
                os.path.expandvars("{output_dir}"),
                "summary-percentile={percentile:06.2f}.csv".format(percentile=float(perc))
                )
            for perc in config['comma_sep_percentiles'].split(',')]

    conda:
        os.path.join(REPO_ROOT_DIR, "semimarkov_forecaster.yml")

    shell:
        """\
        python {input.summarize_script} \
            --comma_sep_percentiles "%s" \
            --input_dir "{input.input_dir}" \
            --output_dir "{input.input_dir}" \
        """ % (config['comma_sep_percentiles'])
