'''
Usage
------
To run a specific random seed
$ snakemake --config random_seed=101 all

Prerequisites
-------------
1) Need local install of anaconda
2) Need local install of Snakemake
See README.md for install instructions
'''
import glob
import os
import numpy as np

REPO_ROOT_DIR = os.environ.get("REPO_ROOT_DIR", "/cluster/tufts/hugheslab/code/covid19-forecasting/")
os.environ['REPO_ROOT_DIR'] = os.path.abspath(REPO_ROOT_DIR)

# Specified in configfile:
# --output_dir
# --min_random_seed 1001
# --max_random_seed 1100
# --random_seed 0

configfile: "config.json"
for key, val in config.items():
    if isinstance(val, str):
        newval = os.path.expandvars(val)
        config[key] = newval

print("Output will go to folder:")
print(config['output_dir'])



# Target rule to run multiple simulations saved to different CSV files
#
# Uses the 'template' defined below
rule all:
    input:
        [os.path.join(
                config['output_dir'],          
                "results-random_seed={random_seed}.csv".format(random_seed=seed)
                )
            for seed in range(config['min_random_seed'], config['max_random_seed'])],
        [os.path.join(
                config['output_dir'],          
                "summary-percentile={percentile:06.2f}.csv".format(percentile=float(perc))
                )
            for perc in config['comma_sep_percentiles'].split(',')]

# Create directory where output will be stored
rule create_output_dir:
    output:
        signal_file=touch(os.path.join(config['output_dir'], '.snakemake_create_output_dir_complete'))

    params:
        output_dir=config['output_dir']
 
    conda:
        os.path.join(REPO_ROOT_DIR, "semimarkov_forecaster.yml")

    shell:
        '''
        python -c 'import pathlib; p = pathlib.Path("{params.output_dir}"); p.mkdir(parents=True, exist_ok=True)'
        '''

# Target rule to run one specific simulation (with seed provided by manual command line input)
#
# Uses the 'template' defined below
rule run_example_simulation:
    input:
        completed_create_output_dir=rules.create_output_dir.output.signal_file,
        output_csv_file=os.path.join(
            config['output_dir'],
            "results-random_seed={random_seed}.csv".format(random_seed=config['random_seed']),
            )

rule template:
    input:
        config_json="params.json",
        forecast_script=glob.glob(os.path.join(REPO_ROOT_DIR, 'run_forecast.py')),
        source_files=glob.glob(os.path.join(REPO_ROOT_DIR, 'semimarkov_forecaster/*.py'))

    output:
        output_csv=os.path.join(
            config['output_dir'],
            "results-random_seed={random_seed}.csv")

    conda:
        os.path.join(REPO_ROOT_DIR, "semimarkov_forecaster.yml")

    shell:
        """\
        python {input.forecast_script} \
            --config_file "{input.config_json}" \
            --random_seed "{wildcards.random_seed}" \
            --output_file "{output.output_csv}" \
        """

# Target rule to run summary (relies on the individual simulations being done)
#

rule summarize:
    input:
        completed_create_output_dir=rules.create_output_dir.output.signal_file,   
        summarize_script=os.path.join(REPO_ROOT_DIR, 'summarize_forecasts.py'),
        source_files=glob.glob(os.path.join(REPO_ROOT_DIR, 'semimarkov_forecaster/*.py'))

    output:
        [os.path.join(
                config['output_dir'],
                "summary-percentile={percentile:06.2f}.csv".format(percentile=float(perc))
                )
            for perc in config['comma_sep_percentiles'].split(',')]

    conda:
        os.path.join(REPO_ROOT_DIR, "semimarkov_forecaster.yml")

    shell:
        """\
        python {{input.summarize_script}} \
            --comma_sep_percentiles "{comma_sep_percentiles}" \
            --input_dir "{output_dir}" \
            --output_dir "{output_dir}" \
        """.format(
            comma_sep_percentiles=config['comma_sep_percentiles'],
            output_dir=config['output_dir'])
